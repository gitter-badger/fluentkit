{"version":3,"sources":["admin/components/roles/edit.js"],"names":["System","register","_export","_context","util","Vue","mdl","adminRolesEdit","setters","_util","_vue","_materialDesignLiteMaterial","execute","template","props","data","role","label","name","permissions","loading","ready","setTimeout","this","$http","get","$root","routes","route","id","include","then","response","perms","forEach","permission","push","status","message","timeout","$dispatch","bind","methods","triggerSave","patch","put","presponse","errors","formatValidationErrors","$setValidationErrors","component"],"mappings":"AAAA,YAEAA,QAAOC,UAAU,OAAQ,MAAO,iCAAkC,SAAUC,EAASC,GACjF,GAAIC,GAAMC,EAAKC,EAAKC,CACpB,QACIC,SAAU,SAAUC,GAAhBL,EAAAK,GAED,SAAUC,GADdL,EAAAK,EAAAA,YAGI,SAAUC,GAFdL,EAAAK,EAAAA,aAKCC,QAAS,WAHbL,GACAM,SAAU,6BACVC,OAAQ,MACRC,KAAM,WACF,OACIC,MACIC,MAAO,GACPC,KAAM,GACNC,gBAEJC,SAAS,IAGjBC,MAAO,WAEHC,WAAW,WACPC,KAAKC,MAAMC,IAAIF,KAAKG,MAAMC,OAAOC,MAAM,kBAAmBC,GAAIN,KAAKM,MAAOC,QAAS,gBAAgBC,KAAK,SAASC,GAE7GT,KAAKP,KAAOgB,EAASjB,KAAKC,IAF4F,IAKlHiB,KACJV,MAAKP,KAAKG,YAAYe,QAAQ,SAASC,GACnCF,EAAMG,KAAKD,EAAWjB,QAG1BK,KAAKP,KAAKG,YAAcc,EAExBV,KAAKH,SAAU,GAEhB,SAASY,GAER,GAAuB,KAAnBA,EAASK,OAAe,CAExB,GAAItB,IAAQuB,QAASN,EAASjB,KAAMwB,QAAS,IAC7ChB,MAAKiB,UAAU,eAAgBzB,OAC9B,CAGD,GAAIA,IAAQuB,QAAS,gGAAiGC,QAAS,IAC/HhB,MAAKiB,UAAU,eAAgBzB,GAInCQ,KAAKH,SAAU,KAErBqB,KAAKlB,MAAO,MAGlBmB,SACIC,YAAa,WAETpB,KAAKH,SAAU,EAEfG,KAAKC,MAAMoB,MAAMrB,KAAKG,MAAMC,OAAOC,MAAM,oBAAqBC,GAAIN,KAAKM,MAAOX,KAAMK,KAAKP,KAAKE,KAAMD,MAAOM,KAAKP,KAAKC,QAAQc,KAAK,SAAUC,GAIxIT,KAAKC,MAAMqB,IAAItB,KAAKG,MAAMC,OAAOC,MAAM,6BAA8BC,GAAIN,KAAKM,MAAOV,YAAaI,KAAKP,KAAKG,cAAcY,KAAK,SAASe,GAEpI,GAAI/B,IAAQuB,QAASN,EAASjB,KAAKuB,QAASC,QAAS,IAErDhB,MAAKiB,UAAU,eAAgBzB,GAE/BQ,KAAKH,SAAU,GAEhB,SAAS0B,GACR,GAAwB,KAApBA,EAAUT,OAAe,CAGzB,GAAIU,GAAS3C,EAAK4C,uBAAuBF,EAAU/B,KAAKgC,OACxDxB,MAAK0B,qBAAqBF,OAExB,IAAwB,KAApBD,EAAUT,OAAe,CAE/B,GAAItB,IAAQuB,QAASQ,EAAU/B,KAAMwB,QAAS,IAC9ChB,MAAKiB,UAAU,eAAgBzB,OAC9B,CAGD,GAAIA,IAAQuB,QAAS,gGAAiGC,QAAS,IAC/HhB,MAAKiB,UAAU,eAAgBzB,GAInCQ,KAAKH,SAAU,KAGpB,SAAUY,GAET,GAAuB,KAAnBA,EAASK,OAAe,CAGxB,GAAIU,GAAS3C,EAAK4C,uBAAuBhB,EAASjB,KAAKgC,OACvDxB,MAAK0B,qBAAqBF,OAExB,IAAuB,KAAnBf,EAASK,OAAe,CAE9B,GAAItB,IAAQuB,QAASN,EAASjB,KAAMwB,QAAS,IAC7ChB,MAAKiB,UAAU,eAAgBzB,OAC9B,CAGD,GAAIA,IAAQuB,QAAS,gGAAiGC,QAAS,IAC/HhB,MAAKiB,UAAU,eAAgBzB,GAInCQ,KAAKH,SAAU,OACnBlB,EAAQ,UAMLG,EAAI6C,UAAU,mBAAoB3C","file":"admin/components/roles/edit.js","sourcesContent":["/*!\n * FluentKit v0.1.0\n * (c) 2016 Lee Mason\n * Released under the MIT License.\n */\nimport * as util from 'util'\nimport Vue from 'vue'\nimport mdl from 'material-design-lite/material'\n\nvar adminRolesEdit = {\n    template: '#admin-roles-edit-template',\n    props: ['id'],\n    data: function(){\n        return {\n            role: {\n                label: '',\n                name: '',\n                permissions: []\n            },\n            loading: true\n        };\n    },\n    ready: function(){\n\n        setTimeout(function(){\n            this.$http.get(this.$root.routes.route('api.roles.show', {id: this.id}), {include: 'permissions'}).then(function(response){\n\n                this.role = response.data.role;\n\n                //reformat roles suitable for form\n                var perms = [];\n                this.role.permissions.forEach(function(permission){\n                    perms.push(permission.name);\n                });\n\n                this.role.permissions = perms;\n\n                this.loading = false;\n\n            }, function(response){\n\n                if (response.status == 401) {\n                    //something bad happened\n                    var data = {message: response.data, timeout: 3000};\n                    this.$dispatch('notification', data);\n                }else{\n\n                    //something bad happened\n                    var data = {message: 'We encountered a technical problem performing this request, please contact the administrator.', timeout: 3000};\n                    this.$dispatch('notification', data);\n\n                }\n\n                this.loading = false;\n            });\n        }.bind(this), 500);\n\n    },\n    methods: {\n        triggerSave: function(){\n\n            this.loading = true;\n\n            this.$http.patch(this.$root.routes.route('api.roles.update', {id: this.id}), {name: this.role.name, label: this.role.label}).then(function (response) {\n\n                // if we have success we should then update the permissions, use put instead of patch to ensure a full update\n\n                this.$http.put(this.$root.routes.route('api.roles.permissions.set', {id: this.id}), {permissions: this.role.permissions}).then(function(presponse){\n\n                    var data = {message: response.data.message, timeout: 3000};\n\n                    this.$dispatch('notification', data);\n\n                    this.loading = false;\n\n                }, function(presponse){\n                    if (presponse.status == 422) {\n\n                        //validation/authorization error - set the errors as returned or clear\n                        var errors = util.formatValidationErrors(presponse.data.errors);\n                        this.$setValidationErrors(errors);\n\n                    }else if (presponse.status == 401) {\n                        //something bad happened\n                        var data = {message: presponse.data, timeout: 3000};\n                        this.$dispatch('notification', data);\n                    }else{\n\n                        //something bad happened\n                        var data = {message: 'We encountered a technical problem performing this request, please contact the administrator.', timeout: 3000};\n                        this.$dispatch('notification', data);\n\n                    }\n\n                    this.loading = false;\n                });\n\n            }, function (response) {\n\n                if (response.status == 422) {\n\n                    //validation/authorization error - set the errors as returned or clear\n                    var errors = util.formatValidationErrors(response.data.errors);\n                    this.$setValidationErrors(errors);\n\n                }else if (response.status == 401) {\n                    //something bad happened\n                    var data = {message: response.data, timeout: 3000};\n                    this.$dispatch('notification', data);\n                }else{\n\n                    //something bad happened\n                    var data = {message: 'We encountered a technical problem performing this request, please contact the administrator.', timeout: 3000};\n                    this.$dispatch('notification', data);\n\n                }\n\n                this.loading = false;\n\n            });\n        }\n    }\n};\n\nexport default Vue.component('admin-roles-edit', adminRolesEdit);\n\n//export default notifications"],"sourceRoot":"/source/"}