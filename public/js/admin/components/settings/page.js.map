{"version":3,"sources":["admin/components/settings/page.js"],"names":["System","register","_export","_context","util","Vue","adminSettingsPage","setters","_util","_vue","execute","template","props","groups","Array","url","String","data","active_panel","loading","methods","getFieldsForSave","request","settings","this","forEach","group","sections","section","fields","field","id","value","syncFieldValidation","event","undefined","errors","$settings","touched","valid","invalid","modified","dirty","e","events","close-panel","save","$http","post","then","response","message","timeout","$dispatch","$broadcast","status","formatValidationErrors","error","substring","$setValidationErrors","component"],"mappings":"AAAA,YAEAA,QAAOC,UAAU,OAAQ,OAAQ,SAAUC,EAASC,GAChD,GAAIC,GAAMC,EAAKC,CACf,QACIC,SAAU,SAAUC,GAAhBJ,EAAAI,GAED,SAAUC,GADdJ,EAAAI,EAAAA,aAICC,QAAS,WAFbJ,GACAK,SAAU,gCACVC,OACIC,OAAQC,MACRC,IAAKC,QAETC,KAAM,WACF,OACIC,aAAc,KACdC,SAAS,IAGjBC,SACIC,iBAAkB,WACd,GAAIC,IAAWC,YAaf,OAXAC,MAAKX,OAAOY,QAAQ,SAASC,GACzBA,EAAMC,SAASF,QAAQ,SAASG,GAC5BA,EAAQC,OAAOJ,QAAQ,SAASK,GAC5BR,EAAQC,SAASO,EAAMC,KACnBA,GAAID,EAAMC,GACVC,MAAOF,EAAME,aAMtBV,GAEXW,oBAAqB,SAASC,GAE1B,GAAaC,SAAVD,EAF6B,IAQ5BA,EAAME,OAASZ,KAAKa,UAAUH,EAAMH,IAAIK,WACxCF,EAAMI,QAAUd,KAAKa,UAAUH,EAAMH,IAAIO,UAAW,EACpDJ,EAAMK,MAAQf,KAAKa,UAAUH,EAAMH,IAAIQ,QAAS,EAChDL,EAAMM,QAAUhB,KAAKa,UAAUH,EAAMH,IAAIS,UAAW,EACpDN,EAAMO,SAAWjB,KAAKa,UAAUH,EAAMH,IAAIU,WAAY,EACtDP,EAAMQ,MAAQlB,KAAKa,UAAUH,EAAMH,IAAIW,QAAS,EACnD,MAAMC,OAKfC,QACIC,cAAe,WACXrB,KAAKN,aAAe,MAExB4B,KAAQ,WAEJtB,KAAKL,SAAU,EAEfK,KAAKuB,MAAMC,KAAKxB,KAAKT,IAAKS,KAAKH,oBAAoB4B,KAAK,SAAUC,GAE9D,GAAIjC,IAAQkC,QAASD,EAASjC,KAAKkC,QAASC,QAAS,IAErD5B,MAAK6B,UAAU,eAAgBpC,GAE/BO,KAAK8B,WAAW,SAEhB9B,KAAKL,SAAU,GAEhB,SAAU+B,GAET,GAAuB,KAAnBA,EAASK,OAAe,CAGxB,GAAInB,GAAShC,EAAKoD,uBAAuBN,EAASjC,KAAKmB,OACvDA,GAAOX,QAAQ,SAASgC,GACpBA,EAAM3B,MAAQ2B,EAAM3B,MAAM4B,UAAU,KAExClC,KAAKmC,qBAAqBvB,OAExB,IAAuB,KAAnBc,EAASK,OAAe,CAE9B,GAAItC,IAAQkC,QAASD,EAASjC,KAAMmC,QAAS,IAC7C5B,MAAK6B,UAAU,eAAgBpC,OAC9B,CAGD,GAAIA,IAAQkC,QAAS,gGAAiGC,QAAS,IAC/H5B,MAAK6B,UAAU,eAAgBpC,GAInCO,KAAKL,SAAU,OAInBjB,EAAQ,UAILG,EAAIuD,UAAU,sBAAuBtD","file":"admin/components/settings/page.js","sourcesContent":["/*!\n * FluentKit v0.1.0\n * (c) 2016 Lee Mason\n * Released under the MIT License.\n */\nimport * as util from 'util'\nimport Vue from 'vue'\n\nvar adminSettingsPage = {\n    template: '#admin-settings-page-template',\n    props: {\n        groups: Array,\n        url: String\n    },\n    data: function(){\n        return {\n            active_panel: null,\n            loading: false\n        };\n    },\n    methods: {\n        getFieldsForSave: function(){\n            var request = {settings : {}};\n\n            this.groups.forEach(function(group){\n                group.sections.forEach(function(section){\n                    section.fields.forEach(function(field){\n                        request.settings[field.id] = {\n                            id: field.id,\n                            value: field.value\n                        };\n                    });\n                });\n            });\n\n            return request;\n        },\n        syncFieldValidation: function(event){\n\n            if(event === undefined){\n                return;\n            }\n\n            //modify the field\n            try {\n                event.errors = this.$settings[event.id].errors || [];\n                event.touched = this.$settings[event.id].touched || false;\n                event.valid = this.$settings[event.id].valid || false;\n                event.invalid = this.$settings[event.id].invalid || false;\n                event.modified = this.$settings[event.id].modified || false;\n                event.dirty = this.$settings[event.id].dirty || false;\n            }catch(e){\n\n            }\n        }\n    },\n    events: {\n        'close-panel': function(){\n            this.active_panel = null;\n        },\n        'save': function(){\n\n            this.loading = true;\n\n            this.$http.post(this.url, this.getFieldsForSave()).then(function (response) {\n\n                var data = {message: response.data.message, timeout: 3000};\n\n                this.$dispatch('notification', data);\n\n                this.$broadcast('saved');\n\n                this.loading = false;\n\n            }, function (response) {\n\n                if (response.status == 422) {\n\n                    //validation/authorization error - set the errors as returned or clear\n                    var errors = util.formatValidationErrors(response.data.errors);\n                    errors.forEach(function(error){\n                        error.field = error.field.substring(9);\n                    });\n                    this.$setValidationErrors(errors);\n\n                }else if (response.status == 401) {\n                    //something bad happened\n                    var data = {message: response.data, timeout: 3000};\n                    this.$dispatch('notification', data);\n                }else{\n\n                    //something bad happened\n                    var data = {message: 'We encountered a technical problem performing this request, please contact the administrator.', timeout: 3000};\n                    this.$dispatch('notification', data);\n\n                }\n\n                this.loading = false;\n\n            });\n\n        }\n    }\n};\n\nexport default Vue.component('admin-settings-page', adminSettingsPage);\n\n//export default notifications"],"sourceRoot":"/source/"}